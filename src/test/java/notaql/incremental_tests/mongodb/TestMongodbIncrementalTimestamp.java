package notaql.incremental_tests.mongodb;

import static org.junit.Assert.assertEquals;

import org.junit.After;
import org.junit.Ignore;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import com.mongodb.DBCollection;

import notaql.engines.mongodb.exceptions.UserDefinedOIDException;
import notaql.incremental_tests.Loglevel;

/**
 * Collection of tests for testing the incremental capabilities of NotaQl with MongoDB using timestamps.
 * 
 * Only inserts are supported and tested. 
 * 
 * IMPORTANT: The pc which executes the test and the mongo-db server have to have synchronized clocks (e.g. use "sudo ntpd -gq").
 */
@Ignore("Execute them manually after syncing the server with the executing environment")
public class TestMongodbIncrementalTimestamp extends TestMongodb {
	// Configuration
	@Rule public final ExpectedException expectedException = ExpectedException.none();
	private static final String OBJECT_ID_REPLACEMENT = "junit_id"; // Timestamp based executions with MongoDB can't overwrite the normal oid (timestamp from the oid is needed)
	
	
	// Class variables
	private static long timestampPreviousExecution;
	
	
	/**
	 * Truncates the tables and resets the timestamp.
	 */
	@After
	public void tearDown() throws Exception {
		super.tearDown();
		
		timestampPreviousExecution = 0;
	}
	
	
	/**
	 * Generates the NotaQL-Query.
	 * 
	 * @param queryBody
	 * @param isTimestampQuery 
	 * @return
	 */
	private static String generateQuery(String queryBody, boolean isTimestampQuery) {
		StringBuilder sb = new StringBuilder();
		
		if (isTimestampQuery)
			sb.append("IN-ENGINE: mongodb(database_name <- '" + DATABASE_NAME + "', collection_name <- '" + input.getName() + "', timestamp <- '" + timestampPreviousExecution + "'),");
		else
			sb.append("IN-ENGINE: mongodb(database_name <- '" + DATABASE_NAME + "', collection_name <- '" + input.getName() + "'),");
		
		sb.append("OUT-ENGINE: mongodb(database_name <- '" + DATABASE_NAME + "', collection_name <- '" + output.getName() + "'),");
		sb.append(queryBody);

		
		timestampPreviousExecution = System.currentTimeMillis();
		
		return sb.toString();
	}
	
	
	/* (non-Javadoc)
	 * @see notaql_extensions.tests.mongodb.TestMongodb#put(com.mongodb.DBCollection, java.lang.String, java.lang.String, java.lang.Object)
	 */
	@Override
	protected void put(DBCollection collection, String objectId, String key, Object value) {
		log("put('" + collection.getName() + "', '" + objectId + "', '" + key + "', '" + value + "')", Loglevel.DEBUG);
		
		mongoApi.put(collection, OBJECT_ID_REPLACEMENT, objectId, key, value);
	}
	
	
	/**
	 * Basic test for timestamp-based incremental computations.
	 * 
	 * - Adds values to the database
	 * - Executes the Script
	 * - Creates a snapshot
	 * - Adds new values
	 * - Re-executes the script and checks the result
	 * 
	 * @throws Exception
	 */
	@Test
	public void test001() throws Exception {
		log("TEST001", Loglevel.DEBUG);
		

		// Prepare the 1. execution
		final String query = "OUT._id <- 'result', OUT.sum <- SUM(IN.salary), OUT.count <- COUNT(IN._id)";
		put(input, "B", "salary", 20000);
		
				
		// 1. Execution
		notaqlEvaluate(generateQuery(query, false));
		
		
		// 1. Assertion
		assertEquals(20000, getInteger(output, "result", "sum"));
		assertEquals(1, getInteger(output, "result", "count"));
		
		
		// Prepare the 2. execution
		put(input, "A", "salary", 15000);
		
		
		// 2. Execution
		notaqlEvaluate(generateQuery(query, true));
		
		
		// 2. Assertion
		assertEquals(35000, getInteger(output, "result", "sum"));
		assertEquals(2, getInteger(output, "result", "count"));
	}
	
	
	/**
	 * Tests if the execution fails if there are documents with user-defined object-ids (only the object id
	 * generated by MongoDB contains a useable timestamp)
	 * 
	 * @throws Exception
	 */
	@Test
	public void test021() throws Exception {
		log("TEST021", Loglevel.DEBUG);
		

		// Prepare the 1. execution
		final String query = "OUT._id <- 'result', OUT.sum <- SUM(IN.salary), OUT.count <- COUNT(IN._id)";
		put(input, "B", "salary", 20000);
		
				
		// 1. Execution
		notaqlEvaluate(generateQuery(query, false));
		
		
		// 1. Assertion
		assertEquals(20000, getInteger(output, "result", "sum"));
		assertEquals(1, getInteger(output, "result", "count"));
		
		
		// Prepare the 2. execution
		mongoApi.put(input, "user-defined-oid", "A", 0);
		
		
		// 2. Execution
		expectedException.expect(UserDefinedOIDException.class);
		notaqlEvaluate(generateQuery(query, true));
	}
}
