package notaql.performance_tests.analyser;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import notaql.performance_tests.PerformanceTest;

/**
 * Analyses the logdata generated by a performance test into a csv file
 */
public class Analyser {
	// Configuration
	private static final Pattern REGEX_PATTERN_TIMESTAMP = Pattern.compile(PerformanceTest.TIMESTAMP_LINE_PREFIX + " (?<timestamp>\\d+) (?<execution>\\d+) (?<comment>.*)");
	
	
	// Class variables
	private static Map<String, List<Long>> commentsRuntimes = new LinkedHashMap<String, List<Long>>(); // Comment -> Runtimes
	private static List<Long> totalRuntimes = new ArrayList<Long>();
	
	
	/**
	 * Calculates the median
	 * 
	 * @param list
	 * @return
	 */
	public static double median(List<Double> list) {
		if (list.isEmpty())
			return 0;
		
	    int middle = list.size()/2;
	    if (list.size()%2 == 1)
	        return list.get(middle);
	    else
	        return (list.get(middle-1) + list.get(middle)) / 2.0;
	}
	
	
	public static void analyze(String filePathString) throws FileNotFoundException, IOException {
		Path filePath = Paths.get(filePathString);
		File file = filePath.toFile();
		
		if (!Files.exists(filePath)) {
			System.err.println("Erster Parameter muss valider Dateipfad sein");
			System.exit(1);
		}
		
		
		// Read the file
		int previousExecution = 1;
		long previousTimestamp = -1;
		long totalRuntime = 0;
		
		Matcher matcher = REGEX_PATTERN_TIMESTAMP.matcher("");
		try (BufferedReader br = new BufferedReader(new FileReader(file))) {
			String line;
			while ((line = br.readLine()) != null) {
				matcher.reset(line); //reset the input
				if (matcher.find()) {
					final long timestamp = Long.parseLong(matcher.group("timestamp"));
					final int execution = Integer.parseInt(matcher.group("execution"));
					final String comment = matcher.group("comment");
					
					
					// Check if this is a new execution
					if (previousExecution != execution) {
						previousTimestamp = -1;
						
						totalRuntimes.add(totalRuntime);
						totalRuntime = 0;
					}
					
					
					// Calculate the runtime
					long runtime;
					if (previousTimestamp == -1)
						runtime = 0;
					else
						runtime = timestamp - previousTimestamp;
					
					totalRuntime += runtime;
					
					
					// Add the comment
					if (!commentsRuntimes.containsKey(comment))
						commentsRuntimes.put(comment, new ArrayList<Long>());
					
					commentsRuntimes.get(comment).add(runtime);
					
					
					previousExecution = execution;
					previousTimestamp = timestamp;
				}
			}
			
			// The last runtime
			totalRuntimes.add(totalRuntime);
		}
		
		
		// Write the csv file
		PrintWriter writer = new PrintWriter(filePath.toAbsolutePath().toString() + ".csv", "UTF-8");
		
		// Headers
		writer.print("\"DESCRIPTION\"");
		for (int execution=1;execution<=previousExecution;execution++)
			writer.print("," + execution);
		writer.print(",\"AVERAGE\",\"MEDIAN\"");
		writer.println();
		
		// # Data
		// Comments
		List<Double> averages = new ArrayList<Double>(commentsRuntimes.size());
		List<Long> medians = new ArrayList<Long>(commentsRuntimes.size());
		
		for (Entry<String, List<Long>> comment : commentsRuntimes.entrySet()) {
			List<Double> runtimesDoubleList = new ArrayList<Double>(comment.getValue().size());
			
			writer.print("\"" + comment.getKey() + "\"");
			for (Long runtime : comment.getValue()) {
				runtimesDoubleList.add(runtime.doubleValue());
				writer.print("," + runtime);
			}
			
			// Average
			averages.add(runtimesDoubleList.stream().mapToDouble(d->d).average().orElse(0));
			writer.print("," + averages.get(averages.size()-1));
			
			// Median
			runtimesDoubleList.sort(Comparator.naturalOrder());
			medians.add((long) median(runtimesDoubleList));
			writer.print("," + medians.get(medians.size()-1));
			
			writer.println();
		}
		
		// Total runtimes
		writer.print("\"TOTAL\"");
		for (long runtime : totalRuntimes) {
			writer.print("," + runtime);
		}
		
		// Average
		writer.print("," + averages.stream().collect(Collectors.summarizingDouble(Double::doubleValue)).getSum());
		
		// Median
		writer.print("," + medians.stream().collect(Collectors.summingLong(Long::longValue)));
		
		
		writer.println();
		writer.close();
	}
	
	
	public static void main(String[] args) throws FileNotFoundException, IOException {
		args = new String[]{"/tmp/performancetest_PerformanceTestRedisIncrementalSnapshotSum.log"}; // DEBUG
		
		if (args.length == 0) {
			System.err.println("Erster Parameter muss Dateipfad sein");
			System.exit(1);
		}
		
		String filePathString = args[0];
		analyze(filePathString);
	}
}
